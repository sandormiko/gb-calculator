apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'war'
apply plugin 'com.moowork.node'
apply plugin: 'de.richsource.gradle.plugins.typescript'

buildscript {
	    repositories {
	     mavenLocal()
	        mavenCentral()
	        maven {
      		url "https://plugins.gradle.org/m2/"
    		}
	    }
	   
	    dependencies {
	        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE")
	        classpath "de.richsource.gradle.plugins:typescript-gradle-plugin:1.8.0"
	        classpath "com.moowork.gradle:gradle-node-plugin:0.12"

	    }

	}

sourceCompatibility = 1.8
targetCompatibility = 1.8



repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

configurations {
    jaxws
}

dependencies {
 //   compile 'org.slf4j:slf4j-api:1.7.21'
 jaxws 'com.sun.xml.ws:jaxws-tools:2.1.4'
	compile("org.springframework.boot:spring-boot-starter-web")
	compile 'org.apache.commons:commons-lang3:3.4'
	compile 'org.springframework.ws:spring-ws-core:2.2.4.RELEASE'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
}





task wsimport {
    ext.destDir = file("${projectDir}/src/main/generated")
    doLast {
        ant {
            sourceSets.main.output.classesDir.mkdirs()
            destDir.mkdirs()
            taskdef(name: 'wsimport',
                    classname: 'com.sun.tools.ws.ant.WsImport',
                    classpath: configurations.jaxws.asPath
            )
            wsimport(keep: true,
                    destdir: sourceSets.main.output.classesDir,
                    sourcedestdir: destDir,
                    extension: "true",
                    verbose: "false",
                    quiet: "false",
                    package: "com.gb.calculator.ws",
                    xnocompile: "true",
                    wsdl: 'src/main/resources/wsdl/Calculator.wsdl') {
                xjcarg(value: "-XautoNameResolution")
            }
        }
    }
}

compileJava {
    dependsOn wsimport
    source wsimport.destDir
}

import com.moowork.gradle.node.NodeExtension
import com.moowork.gradle.node.variant.VariantBuilder

node {
  download = true
}

String nodeExecutable() {
  NodeExtension nodeExt = NodeExtension.get(project)
  return new VariantBuilder(nodeExt).build().nodeExec
}

compileTypeScript {
  compilerExecutable "${nodeExecutable()} node_modules/typescript/lib/tsc.js"
  dependsOn "npmInstall"
  	source = new File('src/main/webapp/ts')
	outputDir = new File('src/main/webapp/ts')
	noEmitOnError = true
}


war {
     dependsOn 'compileTypeScript'
}
